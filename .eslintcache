[{"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\index.js":"1","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\App.js":"2","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Map.js":"3","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\TopTen.js":"4","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Trend.js":"5","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\WorldMap.js":"6","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Number.js":"7","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Header.js":"8","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\TrendTable.js":"9","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\Header.js":"10","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\nameMap.js":"11","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\world.js":"12","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\EpidemicChange.js":"13"},{"size":239,"mtime":1622633747468,"results":"14","hashOfConfig":"15"},{"size":1854,"mtime":1622914479255,"results":"16","hashOfConfig":"15"},{"size":582,"mtime":1622633747468,"results":"17","hashOfConfig":"15"},{"size":1916,"mtime":1622633747468,"results":"18","hashOfConfig":"15"},{"size":399,"mtime":1622890152726,"results":"19","hashOfConfig":"15"},{"size":2948,"mtime":1622889465870,"results":"20","hashOfConfig":"15"},{"size":1423,"mtime":1622633747467,"results":"21","hashOfConfig":"15"},{"size":378,"mtime":1622633747466,"results":"22","hashOfConfig":"15"},{"size":7842,"mtime":1622890034290,"results":"23","hashOfConfig":"15"},{"size":245,"mtime":1622887977311,"results":"24","hashOfConfig":"15"},{"size":6648,"mtime":1622633747471,"results":"25","hashOfConfig":"15"},{"size":147935,"mtime":1622633747473,"results":"26","hashOfConfig":"15"},{"size":5600,"mtime":1622914446478,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"12shfu4",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"31"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\index.js",["60"],"import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.less'\r\nimport App from './App.js'\r\nimport * as echarts from 'echarts/index.blank';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n)\r\n",["61","62"],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\App.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Map.js",["63"],"import React, { useState } from 'react'\r\nimport Header from '../components/Map/Header'\r\nimport Number from '../components/Map/Number'\r\nimport WorldMap from '../components/Map/WorldMap'\r\nconst Map = (props) => {\r\n  const { foreignData, chinaData } = props\r\n  // console.log(foreignData)\r\n  return (\r\n    <div className='brief'>\r\n      <Header foreignData={foreignData} />\r\n      <Number foreignData={foreignData} />\r\n      {foreignData && chinaData ? (\r\n        <WorldMap foreignData={foreignData} chinaData={chinaData} />\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\TopTen.js",["64"],"import React, { useEffect } from 'react'\r\nimport * as echarts from 'echarts'\r\nconst TopTen = (props) => {\r\n  const { chinaData, foreignData } = props\r\n  useEffect(() => {\r\n    const num = []\r\n    const nation = []\r\n    foreignData.countryAddConfirmRankList.forEach((v, i) => {\r\n      num.push(v.addConfirm)\r\n      nation.push(v.nation)\r\n    })\r\n    var myChart = echarts.init(document.querySelector('.addTop10 .map_info'))\r\n    var option = {\r\n      title: {\r\n        text: '   Top10',\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: nation,\r\n        axisLabel: {\r\n          interval: 0,\r\n          rotate: 45,\r\n          color: '#333',\r\n          fontSize: 10,\r\n        },\r\n        axisTick: {\r\n          length: 0,\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        axisLabel: {\r\n          formatter: function (value) {\r\n            return value.toString()\r\n          },\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          type: 'bar',\r\n          data: num,\r\n          barWidth: 18,\r\n          itemStyle: {\r\n            color: 'orange',\r\n            emphasis: {\r\n              color: '#ffe04d',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: function (param) {\r\n          return param.marker + ' ' + param.name + ' - ' + param.value\r\n        },\r\n      },\r\n    }\r\n    myChart.setOption(option)\r\n  }, [foreignData.countryAddConfirmRankList])\r\n  return (\r\n    <div className='addTop10'>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'flex-start',\r\n          alignItems: 'center',\r\n          fontSize: 18,\r\n          fontWeight: 'bold',\r\n          margin: '50px 20px 20px 20px',\r\n        }}\r\n      >\r\n        昨日新增确诊国家Top10\r\n      </div>\r\n      <div className='map_info' style={{height: 400}}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopTen\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Trend.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\WorldMap.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Number.js",["65"],"import React, { useState } from 'react'\r\nimport '../../styles/Map/Number.less'\r\nconst Number = (props) => {\r\n  const { foreignData } = props\r\n  console.log(foreignData)\r\n  return (\r\n    <div className='brief_body'>\r\n      <div className='number'>\r\n        <div className=\"number1\">{foreignData ? foreignData.globalStatis.confirm : ''}</div>\r\n        <div className=\"text\">累计确诊</div>\r\n        <div className=\"more1\">昨日+{foreignData ? foreignData.globalStatis.confirmAdd : ''}</div>\r\n      </div>\r\n      <div className='number'>\r\n        <div className=\"number2\">{foreignData ? foreignData.globalStatis.nowConfirm : ''}</div>\r\n        <div className=\"text\">现有确诊</div>\r\n        <div className=\"more2\">昨日+{foreignData ? foreignData.globalStatis.nowConfirmAdd : ''}</div>\r\n      </div>\r\n      <div className='number'>\r\n        <div className=\"number3\">{foreignData ? foreignData.globalStatis.dead : ''}</div>\r\n        <div className=\"text\">死亡人数</div>\r\n        <div className=\"more3\">昨日+{foreignData ? foreignData.globalStatis.deadAdd : ''}</div>\r\n      </div>\r\n      <div className='number'>\r\n        <div className=\"number4\">{foreignData ? foreignData.globalStatis.heal : ''}</div>\r\n        <div className=\"text\">治愈人数</div>\r\n        <div className=\"more4\">昨日+{foreignData ? foreignData.globalStatis.healAdd : ''}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Number\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Header.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\TrendTable.js",["66"],"import React, { useEffect, useState } from 'react'\r\nimport * as echarts from 'echarts'\r\nimport '../../styles/Trend/TrendTable.less'\r\nconst TrendTable = (props) => {\r\n  const { foreignData, chinaData } = props\r\n  const [trendNumber, setTrendNumber] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const globalDailyHistory = foreignData.globalDailyHistory\r\n    // console.log(globalDailyHistory)\r\n    const num = []\r\n    const date = []\r\n    for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n      if (num.length >= 27) break\r\n      if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n        num.unshift(globalDailyHistory[i].all.newAddConfirm)\r\n        date.unshift(globalDailyHistory[i].date)\r\n        console.log(globalDailyHistory[i])\r\n      }\r\n    }\r\n    // console.log(num ,date)\r\n    let myChart\r\n    let linearBarDom = echarts.getInstanceByDom(document.querySelector('.tendency .map_info'))\r\n    if(linearBarDom == null) {\r\n      myChart = echarts.init(document.querySelector('.tendency .map_info'))\r\n    } else {\r\n      myChart = linearBarDom\r\n    }\r\n    const option = {\r\n      title: {\r\n        text: '  海外新增确诊趋势',\r\n      },\r\n      legend: {\r\n        icon: 'rect',\r\n        itemWidth: 12,\r\n        itemHeight: 12,\r\n        right: 20,\r\n        top: 20,\r\n        orient: 'horizontal',\r\n        textStyle: {\r\n          padding: [3, 0, 0, 0],\r\n        },\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: date,\r\n        axisLabel: {\r\n          rotate: 45,\r\n          interval: 0,\r\n          color: '#ccc',\r\n          fontSize: 10,\r\n        },\r\n        axisTick: {\r\n          length: 0,\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        min: 0,\r\n        max: 1000000,\r\n        axisLabel: {\r\n          formatter: function (param) {\r\n            return param.toString()\r\n          },\r\n        },\r\n        axisTick: {\r\n          length: 0,\r\n        },\r\n        axisLine: {\r\n          show: false,\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          name: '新增确诊',\r\n          type: 'line',\r\n          data: num,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: function (param) {\r\n          return param.seriesName + '<br>' + param.marker + ' ' + param.name + ' - ' + param.value\r\n        },\r\n      },\r\n    }\r\n    if (trendNumber === 0) {\r\n      const num = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num.unshift(globalDailyHistory[i].all.newAddConfirm)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '新增确诊',\r\n          data: num,\r\n          type: 'line',\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 1000000\r\n      option.yAxis.splitNumber = 7\r\n      option.yAxis.axisLabel.formatter = function (value, index) {\r\n        return value.toString()\r\n      }\r\n    } else if (trendNumber === 1) {\r\n      const num1 = []\r\n      const num2 = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num1.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num1.unshift(\r\n            globalDailyHistory[i].all.confirm +\r\n              globalDailyHistory[i].all.heal +\r\n              globalDailyHistory[i].all.dead\r\n          )\r\n          num2.unshift(globalDailyHistory[i].all.confirm)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '累计确诊',\r\n          type: 'line',\r\n          data: num1,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n        {\r\n          name: '现有确诊',\r\n          type: 'line',\r\n          data: num2,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#228B22',\r\n          },\r\n          lineStyle: {\r\n            color: '#228B22',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 60000000\r\n      option.yAxis.splitNumber = 8\r\n      option.yAxis.axisLabel.formatter = function (value) {\r\n        return value.toString()\r\n      }\r\n    } else if (trendNumber === 2) {\r\n      const num1 = []\r\n      const num2 = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num1.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num1.unshift(globalDailyHistory[i].all.dead)\r\n          num2.unshift(globalDailyHistory[i].all.heal)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '死亡数',\r\n          type: 'line',\r\n          data: num1,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n        {\r\n          name: '治愈数',\r\n          type: 'line',\r\n          data: num2,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#228B22',\r\n          },\r\n          lineStyle: {\r\n            color: '#228B22',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 20000000\r\n      option.yAxis.splitNumber = 7\r\n      option.yAxis.axisLabel.formatter = function (value) {\r\n        return value.toString()\r\n      }\r\n    } else if (trendNumber === 3) {\r\n      const num1 = []\r\n      const num2 = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num1.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num1.unshift(globalDailyHistory[i].all.deadRate)\r\n          num2.unshift(globalDailyHistory[i].all.healRate)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '病死率',\r\n          type: 'line',\r\n          data: num1.reverse(),\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n        {\r\n          name: '治愈率',\r\n          type: 'line',\r\n          data: num2.reverse(),\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#228B22',\r\n          },\r\n          lineStyle: {\r\n            color: '#228B22',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 70\r\n      option.yAxis.splitNumber = 7\r\n      option.yAxis.axisLabel.formatter = function (value) {\r\n        return value + '%'\r\n      }\r\n    }\r\n    myChart.clear()\r\n    myChart.setOption(option)\r\n  }, [foreignData.globalDailyHistory, trendNumber])\r\n  return (\r\n    <div className='tendency'>\r\n      <div className='map_info'></div>\r\n      <div className='map_tab'>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(0)}>\r\n          新增确诊\r\n        </div>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(1)}>\r\n          累计确诊/现有确诊\r\n        </div>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(2)}>\r\n          死亡数/治愈数\r\n        </div>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(3)}>\r\n          病死率/治愈率\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TrendTable\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\Header.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\nameMap.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\world.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\EpidemicChange.js",[],{"ruleId":"67","severity":1,"message":"68","line":5,"column":13,"nodeType":"69","messageId":"70","endLine":5,"endColumn":20},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"67","severity":1,"message":"75","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"76","line":4,"column":11,"nodeType":"69","messageId":"70","endLine":4,"endColumn":20},{"ruleId":"67","severity":1,"message":"75","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"67","severity":1,"message":"76","line":5,"column":24,"nodeType":"69","messageId":"70","endLine":5,"endColumn":33},"no-unused-vars","'echarts' is defined but never used.","Identifier","unusedVar","no-native-reassign",["77"],"no-negated-in-lhs",["78"],"'useState' is defined but never used.","'chinaData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]