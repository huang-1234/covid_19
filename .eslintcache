[{"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\index.js":"1","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\App.js":"2","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Map.js":"3","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\TopTen.js":"4","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Trend.js":"5","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\WorldMap.js":"6","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Number.js":"7","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Header.js":"8","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\TrendTable.js":"9","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\Header.js":"10","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\nameMap.js":"11","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\world.js":"12","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\EpidemicChange.js":"13","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\EpidemicChangeEchart.js":"14","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaMap.jsx":"15","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\china.js":"16","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\Echart\\china-left.js":"17","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaMapEchart.js":"18","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\PageChinaMap.js":"19","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaHeader.js":"20","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaNumber.js":"21","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\TrendChina.js":"22","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\TrendTableChina.js":"23","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\News.jsx":"24","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\News\\index.jsx":"25","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\util\\Time.js":"26"},{"size":241,"mtime":1622999699396,"results":"27","hashOfConfig":"28"},{"size":2284,"mtime":1623001175101,"results":"29","hashOfConfig":"28"},{"size":783,"mtime":1622950777024,"results":"30","hashOfConfig":"28"},{"size":1916,"mtime":1622633747468,"results":"31","hashOfConfig":"28"},{"size":399,"mtime":1622890152726,"results":"32","hashOfConfig":"28"},{"size":3103,"mtime":1622997271705,"results":"33","hashOfConfig":"28"},{"size":1453,"mtime":1622951526745,"results":"34","hashOfConfig":"28"},{"size":396,"mtime":1622998281218,"results":"35","hashOfConfig":"28"},{"size":7842,"mtime":1622890034290,"results":"36","hashOfConfig":"28"},{"size":245,"mtime":1622887977311,"results":"37","hashOfConfig":"28"},{"size":6648,"mtime":1622633747471,"results":"38","hashOfConfig":"28"},{"size":147935,"mtime":1622633747473,"results":"39","hashOfConfig":"28"},{"size":508,"mtime":1622956072539,"results":"40","hashOfConfig":"28"},{"size":4915,"mtime":1622918142260,"results":"41","hashOfConfig":"28"},{"size":4500,"mtime":1622996739287,"results":"42","hashOfConfig":"28"},{"size":62753,"mtime":1622920941076,"results":"43","hashOfConfig":"28"},{"size":1727,"mtime":1622948154846,"results":"44","hashOfConfig":"28"},{"size":2420,"mtime":1622952172061,"results":"45","hashOfConfig":"28"},{"size":739,"mtime":1622956060998,"results":"46","hashOfConfig":"28"},{"size":373,"mtime":1622955081783,"results":"47","hashOfConfig":"28"},{"size":1655,"mtime":1622999722658,"results":"48","hashOfConfig":"28"},{"size":453,"mtime":1622955775304,"results":"49","hashOfConfig":"28"},{"size":7891,"mtime":1623000362637,"results":"50","hashOfConfig":"28"},{"size":1050,"mtime":1623001212536,"results":"51","hashOfConfig":"28"},{"size":1268,"mtime":1623001123426,"results":"52","hashOfConfig":"28"},{"size":597,"mtime":1622988465025,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"12shfu4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\index.js",[],["114","115"],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\App.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Map.js",["116"],"import React, { useState } from 'react'\r\nimport Header from '../components/Map/Header'\r\nimport Number from '../components/Map/Number'\r\nimport WorldMap from '../components/Map/WorldMap'\r\n// import ChinaMap from '../components/Map/ChinaMap.jsx';\r\n\r\nconst Map = (props) => {\r\n  const { foreignData, chinaData } = props\r\n  // console.log(foreignData)\r\n  return (\r\n    <div className='brief'>\r\n      <Header foreignData={foreignData} />\r\n      <Number foreignData={foreignData} />\r\n      {foreignData && chinaData ? (\r\n        <WorldMap foreignData={foreignData} chinaData={chinaData} />\r\n      ) : null}\r\n      \r\n      {/* {foreignData && chinaData ? (\r\n        <ChinaMap foreignData={foreignData} chinaData={chinaData} />\r\n      ) : null} */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\TopTen.js",["117"],"import React, { useEffect } from 'react'\r\nimport * as echarts from 'echarts'\r\nconst TopTen = (props) => {\r\n  const { chinaData, foreignData } = props\r\n  useEffect(() => {\r\n    const num = []\r\n    const nation = []\r\n    foreignData.countryAddConfirmRankList.forEach((v, i) => {\r\n      num.push(v.addConfirm)\r\n      nation.push(v.nation)\r\n    })\r\n    var myChart = echarts.init(document.querySelector('.addTop10 .map_info'))\r\n    var option = {\r\n      title: {\r\n        text: '   Top10',\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: nation,\r\n        axisLabel: {\r\n          interval: 0,\r\n          rotate: 45,\r\n          color: '#333',\r\n          fontSize: 10,\r\n        },\r\n        axisTick: {\r\n          length: 0,\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        axisLabel: {\r\n          formatter: function (value) {\r\n            return value.toString()\r\n          },\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          type: 'bar',\r\n          data: num,\r\n          barWidth: 18,\r\n          itemStyle: {\r\n            color: 'orange',\r\n            emphasis: {\r\n              color: '#ffe04d',\r\n            },\r\n          },\r\n        },\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: function (param) {\r\n          return param.marker + ' ' + param.name + ' - ' + param.value\r\n        },\r\n      },\r\n    }\r\n    myChart.setOption(option)\r\n  }, [foreignData.countryAddConfirmRankList])\r\n  return (\r\n    <div className='addTop10'>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          justifyContent: 'flex-start',\r\n          alignItems: 'center',\r\n          fontSize: 18,\r\n          fontWeight: 'bold',\r\n          margin: '50px 20px 20px 20px',\r\n        }}\r\n      >\r\n        昨日新增确诊国家Top10\r\n      </div>\r\n      <div className='map_info' style={{height: 400}}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopTen\r\n",["118","119"],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\Trend.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\WorldMap.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Number.js",["120"],"import React, { useState } from 'react'\r\nimport '../../styles/Map/Number.less'\r\nconst Number = (props) => {\r\n  const { foreignData } = props\r\n  //  console.log('Number/foreignData<<\\n', foreignData)\r\n  return (\r\n    <div className='brief_body'>\r\n      <div className='number'>\r\n        <div className=\"number1\">{foreignData ? foreignData.globalStatis.confirm : ''}</div>\r\n        <div className=\"text\">累计确诊</div>\r\n        <div className=\"more1\">昨日+{foreignData ? foreignData.globalStatis.confirmAdd : ''}</div>\r\n      </div>\r\n      <div className='number'>\r\n        <div className=\"number2\">{foreignData ? foreignData.globalStatis.nowConfirm : ''}</div>\r\n        <div className=\"text\">现有确诊</div>\r\n        <div className=\"more2\">昨日+{foreignData ? foreignData.globalStatis.nowConfirmAdd : ''}</div>\r\n      </div>\r\n      <div className='number'>\r\n        <div className=\"number3\">{foreignData ? foreignData.globalStatis.dead : ''}</div>\r\n        <div className=\"text\">死亡人数</div>\r\n        <div className=\"more3\">昨日+{foreignData ? foreignData.globalStatis.deadAdd : ''}</div>\r\n      </div>\r\n      <div className='number'>\r\n        <div className=\"number4\">{foreignData ? foreignData.globalStatis.heal : ''}</div>\r\n        <div className=\"text\">治愈人数</div>\r\n        <div className=\"more4\">昨日+{foreignData ? foreignData.globalStatis.healAdd : ''}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Number\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\Header.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\TrendTable.js",["121"],"import React, { useEffect, useState } from 'react'\r\nimport * as echarts from 'echarts'\r\nimport '../../styles/Trend/TrendTable.less'\r\nconst TrendTable = (props) => {\r\n  const { foreignData, chinaData } = props\r\n  const [trendNumber, setTrendNumber] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const globalDailyHistory = foreignData.globalDailyHistory\r\n    // console.log(globalDailyHistory)\r\n    const num = []\r\n    const date = []\r\n    for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n      if (num.length >= 27) break\r\n      if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n        num.unshift(globalDailyHistory[i].all.newAddConfirm)\r\n        date.unshift(globalDailyHistory[i].date)\r\n        console.log(globalDailyHistory[i])\r\n      }\r\n    }\r\n    // console.log(num ,date)\r\n    let myChart\r\n    let linearBarDom = echarts.getInstanceByDom(document.querySelector('.tendency .map_info'))\r\n    if(linearBarDom == null) {\r\n      myChart = echarts.init(document.querySelector('.tendency .map_info'))\r\n    } else {\r\n      myChart = linearBarDom\r\n    }\r\n    const option = {\r\n      title: {\r\n        text: '  海外新增确诊趋势',\r\n      },\r\n      legend: {\r\n        icon: 'rect',\r\n        itemWidth: 12,\r\n        itemHeight: 12,\r\n        right: 20,\r\n        top: 20,\r\n        orient: 'horizontal',\r\n        textStyle: {\r\n          padding: [3, 0, 0, 0],\r\n        },\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: date,\r\n        axisLabel: {\r\n          rotate: 45,\r\n          interval: 0,\r\n          color: '#ccc',\r\n          fontSize: 10,\r\n        },\r\n        axisTick: {\r\n          length: 0,\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        min: 0,\r\n        max: 1000000,\r\n        axisLabel: {\r\n          formatter: function (param) {\r\n            return param.toString()\r\n          },\r\n        },\r\n        axisTick: {\r\n          length: 0,\r\n        },\r\n        axisLine: {\r\n          show: false,\r\n        },\r\n      },\r\n      series: [\r\n        {\r\n          name: '新增确诊',\r\n          type: 'line',\r\n          data: num,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n      ],\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: function (param) {\r\n          return param.seriesName + '<br>' + param.marker + ' ' + param.name + ' - ' + param.value\r\n        },\r\n      },\r\n    }\r\n    if (trendNumber === 0) {\r\n      const num = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num.unshift(globalDailyHistory[i].all.newAddConfirm)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '新增确诊',\r\n          data: num,\r\n          type: 'line',\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 1000000\r\n      option.yAxis.splitNumber = 7\r\n      option.yAxis.axisLabel.formatter = function (value, index) {\r\n        return value.toString()\r\n      }\r\n    } else if (trendNumber === 1) {\r\n      const num1 = []\r\n      const num2 = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num1.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num1.unshift(\r\n            globalDailyHistory[i].all.confirm +\r\n              globalDailyHistory[i].all.heal +\r\n              globalDailyHistory[i].all.dead\r\n          )\r\n          num2.unshift(globalDailyHistory[i].all.confirm)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '累计确诊',\r\n          type: 'line',\r\n          data: num1,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n        {\r\n          name: '现有确诊',\r\n          type: 'line',\r\n          data: num2,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#228B22',\r\n          },\r\n          lineStyle: {\r\n            color: '#228B22',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 60000000\r\n      option.yAxis.splitNumber = 8\r\n      option.yAxis.axisLabel.formatter = function (value) {\r\n        return value.toString()\r\n      }\r\n    } else if (trendNumber === 2) {\r\n      const num1 = []\r\n      const num2 = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num1.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num1.unshift(globalDailyHistory[i].all.dead)\r\n          num2.unshift(globalDailyHistory[i].all.heal)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '死亡数',\r\n          type: 'line',\r\n          data: num1,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n        {\r\n          name: '治愈数',\r\n          type: 'line',\r\n          data: num2,\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#228B22',\r\n          },\r\n          lineStyle: {\r\n            color: '#228B22',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 20000000\r\n      option.yAxis.splitNumber = 7\r\n      option.yAxis.axisLabel.formatter = function (value) {\r\n        return value.toString()\r\n      }\r\n    } else if (trendNumber === 3) {\r\n      const num1 = []\r\n      const num2 = []\r\n      const date = []\r\n      for (let i = globalDailyHistory.length - 1; i >= 0; i--) {\r\n        if (num1.length >= 27) break\r\n        if ((globalDailyHistory.length + 1 - i) % 3 === 0) {\r\n          num1.unshift(globalDailyHistory[i].all.deadRate)\r\n          num2.unshift(globalDailyHistory[i].all.healRate)\r\n          date.unshift(globalDailyHistory[i].date)\r\n        }\r\n      }\r\n      option.series = [\r\n        {\r\n          name: '病死率',\r\n          type: 'line',\r\n          data: num1.reverse(),\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n          lineStyle: {\r\n            color: '#ff3d18',\r\n          },\r\n        },\r\n        {\r\n          name: '治愈率',\r\n          type: 'line',\r\n          data: num2.reverse(),\r\n          smooth: true,\r\n          itemStyle: {\r\n            color: '#228B22',\r\n          },\r\n          lineStyle: {\r\n            color: '#228B22',\r\n          },\r\n        },\r\n      ]\r\n      option.yAxis.max = 70\r\n      option.yAxis.splitNumber = 7\r\n      option.yAxis.axisLabel.formatter = function (value) {\r\n        return value + '%'\r\n      }\r\n    }\r\n    myChart.clear()\r\n    myChart.setOption(option)\r\n  }, [foreignData.globalDailyHistory, trendNumber])\r\n  return (\r\n    <div className='tendency'>\r\n      <div className='map_info'></div>\r\n      <div className='map_tab'>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(0)}>\r\n          新增确诊\r\n        </div>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(1)}>\r\n          累计确诊/现有确诊\r\n        </div>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(2)}>\r\n          死亡数/治愈数\r\n        </div>\r\n        <div className='map_tabItem' onClick={() => setTrendNumber(3)}>\r\n          病死率/治愈率\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TrendTable\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\Header.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\nameMap.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\world.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\EpidemicChange.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\EpidemicChangeEchart.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaMap.jsx",["122","123"],"import React, { useEffect, useState } from 'react'\r\n// import { ChinaMapEchart } from '../../Echart/china-left.js'\r\n// import { getChinaMapEchart } from './ChinaMapEchart';\r\nimport * as echarts from 'echarts'\r\n// import nameMap from '../../utils/nameMap'\r\nimport '../../styles/Map/ChinaMap.less'\r\nimport '../../utils/china.js'\r\n\r\nconst ChinaMap = (props) => {\r\n  const { chinaData } = props\r\n  const [number, setNumber] = useState(0);\r\n  console.log('chinaData<<', chinaData);\r\n\r\n  useEffect(() => {\r\n    // ChinaMapEchart(chinaData)\r\n\r\n    const chinaProvincesArr = chinaData.areaTree[0].children;\r\n\r\n    const nameMapArr = chinaData.areaTree[0].children;\r\n    const nameMap = {};\r\n    nameMapArr.forEach((item, index) => {\r\n      nameMap[index] = item.name;\r\n    })\r\n\r\n    let virusDatas = []\r\n    chinaProvincesArr.forEach((item, index) => {\r\n      virusDatas[index] = {}\r\n      virusDatas[index].name = item.name\r\n      if (number === 0) {\r\n        virusDatas[index].value = item.total.confirm;\r\n      } else {\r\n        virusDatas[index].value = item.today.confirm;\r\n      }\r\n    })\r\n\r\n    let myChart\r\n    let linearBarDom = echarts.getInstanceByDom(document.querySelector('.map .chinaMap'))\r\n    if (linearBarDom == null) {\r\n      myChart = echarts.init(document.querySelector('.map .chinaMap'))\r\n    } else {\r\n      myChart = linearBarDom\r\n    }\r\n    // sb = size_base  // sr = size_race\r\n    const sb = 20;\r\n    const sr1 = 5, sr2 = 25, sr3 = 125, sr4 = 625, sr5 = 3125, sr6 = 15625;\r\n    \r\n    const dss = { // dss = data_sizes\r\n      // mns = min_size ，  mxs = max_size\r\n      mns0: 1, mxs0: sb - 1,\r\n      mns1: sb, mxs1: sb * sr1 - 1,\r\n      mns2: sb * sr1, mxs2: sb * sr2 - 1,\r\n      mns3: sb * sr2,  mxs3: sb * sr3 - 1,\r\n      mns4: sb * sr3 ,  mxs4: sb * sr4 - 1,\r\n      mns5: sb * sr4 ,  mxs5: sb * sr5 - 1,\r\n      mns6: sb * sr5 ,  mxx6: sb * sr6 - 1,\r\n    }\r\n    const labels = new Array(30);\r\n    for (const index in dss) {\r\n      labels.push(dss[index].toString());\r\n    }\r\n    const option = {\r\n      tooltip: {\r\n        trigger: 'item',\r\n        // triggerOn: \"mousemove\",\r\n        formatter: function (params) {\r\n          return params.name + ' have ' + (params.value ? params.value + ' person': 0)\r\n        },\r\n      },\r\n      visualMap: {\r\n        type: 'piecewise',\r\n        pieces: [\r\n\r\n          // { max: 0, label: '0', color: '#2E8B57' },\r\n          // { min: 1, max: 499, label: '1-499', color: '#48D1CC' },\r\n          // { min: 500, max: 4999, label: '500-4999', color: '#fff7ba' },\r\n          // { min: 5000, max: 9999, label: '5000-9999', color: '#ffc24b' },\r\n          // { min: 10000, max: 100000, label: '1万-10万', color: '#fe5e3b' },\r\n          // { min: 100000, max: 500000, label: '10万-50万', color: '#e2482b' },\r\n          // { min: 500000, label: '50万以上', color: '#b93e26' },\r\n\r\n          { max: 0, label: 0, color: '#2E8B57' },\r\n          { min: dss.mns0, max: dss.mxs0, label: labels[0]+labels[1], color: '#48D1CC' },\r\n          { min: dss.mns1, max: dss.mxs1, label: labels[2]+labels[3], color: '#fff7ba' },\r\n          { min: dss.mns2, max: dss.mxs2, label: labels[4]+labels[5], color: '#ffc24b' },\r\n          { min: dss.mns3, max: dss.mxs3, label: labels[6]+labels[7], color: '#fe5e3b' },\r\n          { min: dss.mns4, max: dss.mxs4, label: labels[8]+labels[9], color: '#e2482b' },\r\n          { min: dss.mns5,                label: labels[10]+labels[11], color: '#b93e26' },\r\n\r\n        ],\r\n        itemHeight: 10,\r\n        itemWidth: 10,\r\n        inverse: true,\r\n      },\r\n      series: [\r\n        {\r\n          name: '',\r\n          data: virusDatas,\r\n          type: 'map',\r\n          map: 'china',\r\n          nameMap: nameMap,\r\n          emphasis: {\r\n            areaColor: '#ffffff',\r\n            label: {\r\n              show: false,\r\n            },\r\n          },\r\n          layoutCenter: ['center', 'center'],\r\n          layoutSize: '150%',\r\n        },\r\n      ],\r\n    }\r\n    myChart.setOption(option)\r\n\r\n    // getChinaMapEchart(chinaData, number);\r\n\r\n  }, [chinaData.areaTree[0].children, chinaData.chinaTotal.confirm, chinaData.chinaTotal.nowConfirm, number])\r\n\r\n  return (\r\n    <div className='map'>\r\n      <div className='chinaMap'></div>\r\n      <div className='map_tab'>\r\n        <div className='cur' onClick={() => setNumber(0)}>\r\n          累计确诊\r\n        </div>\r\n        <div className='cur' onClick={() => setNumber(1)}>\r\n          现有确诊\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChinaMap\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\utils\\china.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\Echart\\china-left.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaMapEchart.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\PageChinaMap.js",["124"],"import React, { useState } from 'react'\r\nimport ChinaHeader from '../components/Map/ChinaHeader'\r\nimport ChinaNumber from '../components/Map/ChinaNumber'\r\nimport ChinaMap from '../components/Map/ChinaMap';\r\n\r\nconst PageChinaMap = (props) => {\r\n  const { foreignData, chinaData } = props\r\n  //  console.log(chinaData)\r\n  return (\r\n    <div className='brief'>\r\n      <ChinaHeader chinaData={chinaData} />\r\n      <ChinaNumber chinaData={chinaData} />\r\n      {/* {foreignData && chinaData ? (\r\n        <WorldMap foreignData={foreignData} chinaData={chinaData} />\r\n      ) : null}\r\n       */}\r\n      {foreignData && chinaData ? (\r\n        <ChinaMap  chinaData={chinaData} />\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PageChinaMap\r\n","G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaHeader.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Map\\ChinaNumber.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\TrendChina.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\Trend\\TrendTableChina.js",[],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\pages\\News.jsx",["125"],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\News\\index.jsx",["126"],"G:\\Study\\Code\\Web\\DataVisualization\\covid_19\\src\\components\\util\\Time.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"135","line":4,"column":11,"nodeType":"133","messageId":"134","endLine":4,"endColumn":20},{"ruleId":"127","replacedBy":"136"},{"ruleId":"129","replacedBy":"137"},{"ruleId":"131","severity":1,"message":"132","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"135","line":5,"column":24,"nodeType":"133","messageId":"134","endLine":5,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":116,"column":6,"nodeType":"140","endLine":116,"endColumn":109,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":116,"column":7,"nodeType":"143","endLine":116,"endColumn":37},{"ruleId":"131","severity":1,"message":"132","line":1,"column":17,"nodeType":"133","messageId":"134","endLine":1,"endColumn":25},{"ruleId":"131","severity":1,"message":"144","line":1,"column":37,"nodeType":"133","messageId":"134","endLine":1,"endColumn":41},{"ruleId":"131","severity":1,"message":"145","line":40,"column":9,"nodeType":"133","messageId":"134","endLine":40,"endColumn":14},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'chinaData' is assigned a value but never used.",["146"],["147"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chinaData.areaTree'. Either include it or remove the dependency array.","ArrayExpression",["148"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","'Lazy' is defined but never used.","'style' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},"Update the dependencies array to be: [chinaData.areaTree, chinaData.chinaTotal.confirm, chinaData.chinaTotal.nowConfirm, number]",{"range":"151","text":"152"},[4003,4106],"[chinaData.areaTree, chinaData.chinaTotal.confirm, chinaData.chinaTotal.nowConfirm, number]"]